{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuRA;;;;AAEA","sourcesContent":["/*!\r\n * devextreme-angular\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nimport { TransferState } from '@angular/platform-browser';\r\nimport { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';\r\nimport DevExpress from 'devextreme/bundles/dx.all';\r\nimport { dxCalendarOptions } from 'devextreme/ui/calendar';\r\nimport { dxPopupOptions } from 'devextreme/ui/popup';\r\nimport { format } from 'devextreme/ui/widget/ui.widget';\r\nimport DxDateBox from 'devextreme/ui/date_box';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';\r\nimport { DxiButtonComponent } from 'devextreme-angular/ui/nested';\r\n/** The DateBox is a widget that displays date and time in a specified format, and enables a user to pick or type in the required date/time value. */\r\nexport declare class DxDateBoxComponent extends DxComponent implements OnDestroy, ControlValueAccessor, OnChanges, DoCheck {\r\n    private _watcherHelper;\r\n    private _idh;\r\n    instance: DxDateBox;\r\n    /** Specifies whether or not the widget allows an end-user to enter a custom value. */\r\n    acceptCustomValue: boolean;\r\n    /** Specifies the shortcut key that sets focus on the widget. */\r\n    accessKey: string;\r\n    /** Specifies whether or not the widget changes its state when interacting with a user. */\r\n    activeStateEnabled: boolean;\r\n    /** Specifies whether or not adaptive widget rendering is enabled on a small screen. */\r\n    adaptivityEnabled: boolean;\r\n    /** The text displayed on the Apply button. */\r\n    applyButtonText: string;\r\n    /** Specifies the way an end-user applies the selected value. */\r\n    applyValueMode: string;\r\n    /** Allows you to add custom buttons to the input text field. */\r\n    buttons: Array<string | DevExpress.ui.dxTextEditorButton>;\r\n    /** Configures the calendar's value picker. Applies only if the pickerType is \"calendar\". */\r\n    calendarOptions: dxCalendarOptions;\r\n    /** The text displayed on the Cancel button. */\r\n    cancelButtonText: string;\r\n    /** Specifies the message displayed if the specified date is later than the max value or earlier than the min value. */\r\n    dateOutOfRangeMessage: string;\r\n    /** Specifies the date-time value serialization format. Use it only if you do not specify the value at design time. */\r\n    dateSerializationFormat: string;\r\n    /** Specifies whether to render the drop-down field's content when it is displayed. If false, the content is rendered immediately. */\r\n    deferRendering: boolean;\r\n    /** Specifies whether the widget responds to user interaction. */\r\n    disabled: boolean;\r\n    /** Specifies dates that users cannot select. Applies only if pickerType is \"calendar\". */\r\n    disabledDates: Function | Array<Date>;\r\n    /** Specifies the date display format. Ignored if the pickerType option is \"native\" */\r\n    displayFormat: format | string;\r\n    /** Specifies a custom template for the drop-down button. */\r\n    dropDownButtonTemplate: any;\r\n    /** Configures the drop-down field which holds the content. */\r\n    dropDownOptions: dxPopupOptions;\r\n    /** Specifies the attributes to be attached to the widget's root element. */\r\n    elementAttr: any;\r\n    /** Specifies whether the widget can be focused using keyboard navigation. */\r\n    focusStateEnabled: boolean;\r\n    /** Specifies the widget's height. */\r\n    height: number | Function | string;\r\n    /** Specifies text for a hint that appears when a user pauses on the widget. */\r\n    hint: string;\r\n    /** Specifies whether the widget changes its state when a user pauses on it. */\r\n    hoverStateEnabled: boolean;\r\n    /** Specifies the attributes to be passed on to the underlying HTML element. */\r\n    inputAttr: any;\r\n    /** Specifies the interval between neighboring values in the popup list in minutes. */\r\n    interval: number;\r\n    /** Specifies the message displayed if the typed value is not a valid date or time. */\r\n    invalidDateMessage: string;\r\n    /** Specifies or indicates whether the editor's value is valid. */\r\n    isValid: boolean;\r\n    /** The last date that can be selected within the widget. */\r\n    max: Date | number | string;\r\n    /** Specifies the maximum number of characters you can enter into the textbox. */\r\n    maxLength: number | string;\r\n    /** @deprecated Use the calendarOptions option instead. */\r\n    /** Specifies the maximum zoom level of a calendar, which is used to pick the date. */\r\n    maxZoomLevel: string;\r\n    /** The minimum date that can be selected within the widget. */\r\n    min: Date | number | string;\r\n    /** @deprecated Use the calendarOptions option instead. */\r\n    /** Specifies the minimal zoom level of a calendar, which is used to pick the date. */\r\n    minZoomLevel: string;\r\n    /** The value to be assigned to the `name` attribute of the underlying HTML element. */\r\n    name: string;\r\n    /** Specifies whether or not the drop-down editor is displayed. */\r\n    opened: boolean;\r\n    /** Specifies whether a user can open the drop-down list by clicking a text field. */\r\n    openOnFieldClick: boolean;\r\n    /** Specifies the type of the date/time picker. */\r\n    pickerType: string;\r\n    /** Specifies a placeholder for the input field. */\r\n    placeholder: string;\r\n    /** Specifies whether the editor is read-only. */\r\n    readOnly: boolean;\r\n    /** Switches the widget to a right-to-left representation. */\r\n    rtlEnabled: boolean;\r\n    /** Specifies whether to show the analog clock in the value picker. Applies only if type is \"datetime\" and pickerType is \"calendar\". */\r\n    showAnalogClock: boolean;\r\n    /** Specifies whether to display the Clear button in the widget. */\r\n    showClearButton: boolean;\r\n    /** Specifies whether the drop-down button is visible. */\r\n    showDropDownButton: boolean;\r\n    /** Specifies whether or not the widget checks the inner text for spelling mistakes. */\r\n    spellcheck: boolean;\r\n    /** Specifies how the widget's text field is styled. */\r\n    stylingMode: string;\r\n    /** Specifies the number of the element when the Tab key is used for navigating. */\r\n    tabIndex: number;\r\n    /** The read-only option that holds the text displayed by the widget input element. */\r\n    text: string;\r\n    /** A format used to display date/time information. */\r\n    type: string;\r\n    /** Specifies whether to control user input using a mask created based on the displayFormat. */\r\n    useMaskBehavior: boolean;\r\n    /** Information on the broken validation rule. Contains the first item from the validationErrors array. */\r\n    validationError: any;\r\n    /** An array of the validation rules that failed. */\r\n    validationErrors: Array<any>;\r\n    /** Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed. */\r\n    validationMessageMode: string;\r\n    /** Indicates or specifies the current validation status. */\r\n    validationStatus: string;\r\n    /** An object or a value specifying the date and time currently selected using the date box. */\r\n    value: Date | number | string;\r\n    /** Specifies the DOM events after which the widget's value should be updated. */\r\n    valueChangeEvent: string;\r\n    /** Specifies whether the widget is visible. */\r\n    visible: boolean;\r\n    /** Specifies the widget's width. */\r\n    width: number | Function | string;\r\n    /** A function that is executed when the widget loses focus after the text field's content was changed using the keyboard. */\r\n    onChange: EventEmitter<any>;\r\n    /** A function that is executed once the drop-down editor is closed. */\r\n    onClosed: EventEmitter<any>;\r\n    /** A function that is executed when the widget's content is ready and each time the content is changed. */\r\n    onContentReady: EventEmitter<any>;\r\n    /** A function that is executed when the widget's input has been copied. */\r\n    onCopy: EventEmitter<any>;\r\n    /** A function that is executed when the widget's input has been cut. */\r\n    onCut: EventEmitter<any>;\r\n    /** A function that is executed before the widget is disposed of. */\r\n    onDisposing: EventEmitter<any>;\r\n    /** A function that is executed when the Enter key has been pressed while the widget is focused. */\r\n    onEnterKey: EventEmitter<any>;\r\n    /** A function that is executed when the widget gets focus. */\r\n    onFocusIn: EventEmitter<any>;\r\n    /** A function that is executed when the widget loses focus. */\r\n    onFocusOut: EventEmitter<any>;\r\n    /** A function used in JavaScript frameworks to save the widget instance. */\r\n    onInitialized: EventEmitter<any>;\r\n    /** A function that is executed each time the widget's input is changed while the widget is focused. */\r\n    onInput: EventEmitter<any>;\r\n    /** A function that is executed when a user is pressing a key on the keyboard. */\r\n    onKeyDown: EventEmitter<any>;\r\n    /** @deprecated [important]The `keyPress` event is removed from the web standards and will be deprecated in modern browsers soon. Refer to the [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Document/keypress_event) topic for details. */\r\n    /** A function that is executed when a user presses a key on the keyboard. */\r\n    onKeyPress: EventEmitter<any>;\r\n    /** A function that is executed when a user releases a key on the keyboard. */\r\n    onKeyUp: EventEmitter<any>;\r\n    /** A function that is executed once the drop-down editor is opened. */\r\n    onOpened: EventEmitter<any>;\r\n    /** A function that is executed after a widget option is changed. */\r\n    onOptionChanged: EventEmitter<any>;\r\n    /** A function that is executed when the widget's input has been pasted. */\r\n    onPaste: EventEmitter<any>;\r\n    /** A function that is executed after the widget's value is changed. */\r\n    onValueChanged: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    acceptCustomValueChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    accessKeyChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    activeStateEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    adaptivityEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    applyButtonTextChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    applyValueModeChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    buttonsChange: EventEmitter<Array<string | DevExpress.ui.dxTextEditorButton>>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    calendarOptionsChange: EventEmitter<dxCalendarOptions>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    cancelButtonTextChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    dateOutOfRangeMessageChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    dateSerializationFormatChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    deferRenderingChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    disabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    disabledDatesChange: EventEmitter<Function | Array<Date>>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    displayFormatChange: EventEmitter<format | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    dropDownButtonTemplateChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    dropDownOptionsChange: EventEmitter<dxPopupOptions>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    elementAttrChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    focusStateEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    heightChange: EventEmitter<number | Function | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    hintChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    hoverStateEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    inputAttrChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    intervalChange: EventEmitter<number>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    invalidDateMessageChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    isValidChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    maxChange: EventEmitter<Date | number | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    maxLengthChange: EventEmitter<number | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    maxZoomLevelChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    minChange: EventEmitter<Date | number | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    minZoomLevelChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    nameChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    openedChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    openOnFieldClickChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    pickerTypeChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    placeholderChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    readOnlyChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    rtlEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    showAnalogClockChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    showClearButtonChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    showDropDownButtonChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    spellcheckChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    stylingModeChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    tabIndexChange: EventEmitter<number>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    textChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    typeChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    useMaskBehaviorChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    validationErrorChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    validationErrorsChange: EventEmitter<Array<any>>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    validationMessageModeChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    validationStatusChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    valueChange: EventEmitter<Date | number | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    valueChangeEventChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    visibleChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    widthChange: EventEmitter<number | Function | string>;\r\n    onBlur: EventEmitter<any>;\r\n    change(_: any): void;\r\n    touched: (_: any) => void;\r\n    buttonsChildren: QueryList<DxiButtonComponent>;\r\n    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);\r\n    protected _createInstance(element: any, options: any): DxDateBox;\r\n    writeValue(value: any): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    registerOnChange(fn: (_: any) => void): void;\r\n    registerOnTouched(fn: () => void): void;\r\n    _createWidget(element: any): void;\r\n    ngOnDestroy(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    setupChanges(prop: string, changes: SimpleChanges): void;\r\n    ngDoCheck(): void;\r\n    _setOption(name: string, value: any): void;\r\n}\r\nexport declare class DxDateBoxModule {\r\n}\r\n"]}