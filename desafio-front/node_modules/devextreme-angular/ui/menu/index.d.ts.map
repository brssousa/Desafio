{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0LA;;;;AAEA","sourcesContent":["/*!\r\n * devextreme-angular\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nimport { TransferState } from '@angular/platform-browser';\r\nimport { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';\r\nimport DevExpress from 'devextreme/bundles/dx.all';\r\nimport DxMenu from 'devextreme/ui/menu';\r\nimport { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';\r\nimport { DxiItemComponent } from 'devextreme-angular/ui/nested';\r\n/** The Menu widget is a panel with clickable items. A click on an item opens a drop-down menu, which can contain several submenus. */\r\nexport declare class DxMenuComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {\r\n    private _watcherHelper;\r\n    private _idh;\r\n    instance: DxMenu;\r\n    /** Specifies the shortcut key that sets focus on the widget. */\r\n    accessKey: string;\r\n    /** A Boolean value specifying whether or not the widget changes its state when interacting with a user. */\r\n    activeStateEnabled: boolean;\r\n    /** Specifies whether adaptive widget rendering is enabled on small screens. Applies only if the orientation is \"horizontal\". */\r\n    adaptivityEnabled: boolean;\r\n    /** Configures widget visibility animations. This object contains two fields: show and hide. */\r\n    animation: {\r\n        hide?: DevExpress.animationConfig;\r\n        show?: DevExpress.animationConfig;\r\n    };\r\n    /** Specifies the name of the CSS class to be applied to the root menu level and all submenus. */\r\n    cssClass: string;\r\n    /** Binds the widget to data. */\r\n    dataSource: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<DevExpress.ui.dxMenuItem>;\r\n    /** Specifies whether the widget responds to user interaction. */\r\n    disabled: boolean;\r\n    /** Specifies the name of the data source item field whose value defines whether or not the corresponding widget item is disabled. */\r\n    disabledExpr: Function | string;\r\n    /** Specifies the data field whose values should be displayed. */\r\n    displayExpr: Function | string;\r\n    /** Specifies the attributes to be attached to the widget's root element. */\r\n    elementAttr: any;\r\n    /** Specifies whether the widget can be focused using keyboard navigation. */\r\n    focusStateEnabled: boolean;\r\n    /** Specifies the widget's height. */\r\n    height: number | Function | string;\r\n    /** Specifies whether or not the submenu is hidden when the mouse pointer leaves it. */\r\n    hideSubmenuOnMouseLeave: boolean;\r\n    /** Specifies text for a hint that appears when a user pauses on the widget. */\r\n    hint: string;\r\n    /** Specifies whether the widget changes its state when a user pauses on it. */\r\n    hoverStateEnabled: boolean;\r\n    /** Holds an array of menu items. */\r\n    items: Array<DevExpress.ui.dxMenuItem>;\r\n    /** Specifies which data field contains nested items. */\r\n    itemsExpr: Function | string;\r\n    /** Specifies a custom template for items. */\r\n    itemTemplate: any;\r\n    /** Specifies whether the menu has horizontal or vertical orientation. */\r\n    orientation: string;\r\n    /** Switches the widget to a right-to-left representation. */\r\n    rtlEnabled: boolean;\r\n    /** Specifies whether or not an item becomes selected if a user clicks it. */\r\n    selectByClick: boolean;\r\n    /** Specifies the name of the data source item field whose value defines whether or not the corresponding widget items is selected. */\r\n    selectedExpr: Function | string;\r\n    /** The selected item object. */\r\n    selectedItem: any;\r\n    /** Specifies the selection mode supported by the menu. */\r\n    selectionMode: string;\r\n    /** Specifies options for showing and hiding the first level submenu. */\r\n    showFirstSubmenuMode: string | {\r\n        delay?: number | {\r\n            hide?: number;\r\n            show?: number;\r\n        };\r\n        name?: string;\r\n    };\r\n    /** Specifies options of submenu showing and hiding. */\r\n    showSubmenuMode: string | {\r\n        delay?: number | {\r\n            hide?: number;\r\n            show?: number;\r\n        };\r\n        name?: string;\r\n    };\r\n    /** Specifies the direction at which the submenus are displayed. */\r\n    submenuDirection: string;\r\n    /** Specifies the number of the element when the Tab key is used for navigating. */\r\n    tabIndex: number;\r\n    /** Specifies whether the widget is visible. */\r\n    visible: boolean;\r\n    /** Specifies the widget's width. */\r\n    width: number | Function | string;\r\n    /** A function that is executed when the widget's content is ready and each time the content is changed. */\r\n    onContentReady: EventEmitter<any>;\r\n    /** A function that is executed before the widget is disposed of. */\r\n    onDisposing: EventEmitter<any>;\r\n    /** A function used in JavaScript frameworks to save the widget instance. */\r\n    onInitialized: EventEmitter<any>;\r\n    /** A function that is executed when a collection item is clicked or tapped. */\r\n    onItemClick: EventEmitter<any>;\r\n    /** A function that is executed when a collection item is right-clicked or pressed. */\r\n    onItemContextMenu: EventEmitter<any>;\r\n    /** A function that is executed after a collection item is rendered. */\r\n    onItemRendered: EventEmitter<any>;\r\n    /** A function that is executed after a widget option is changed. */\r\n    onOptionChanged: EventEmitter<any>;\r\n    /** A function that is executed when a collection item is selected or selection is canceled. */\r\n    onSelectionChanged: EventEmitter<any>;\r\n    /** A function that is executed after a submenu is hidden. */\r\n    onSubmenuHidden: EventEmitter<any>;\r\n    /** A function that is executed before a submenu is hidden. */\r\n    onSubmenuHiding: EventEmitter<any>;\r\n    /** A function that is executed before a submenu is displayed. */\r\n    onSubmenuShowing: EventEmitter<any>;\r\n    /** A function that is executed after a submenu is displayed. */\r\n    onSubmenuShown: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    accessKeyChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    activeStateEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    adaptivityEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    animationChange: EventEmitter<{\r\n        hide?: DevExpress.animationConfig;\r\n        show?: DevExpress.animationConfig;\r\n    }>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    cssClassChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    dataSourceChange: EventEmitter<DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<DevExpress.ui.dxMenuItem>>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    disabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    disabledExprChange: EventEmitter<Function | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    displayExprChange: EventEmitter<Function | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    elementAttrChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    focusStateEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    heightChange: EventEmitter<number | Function | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    hideSubmenuOnMouseLeaveChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    hintChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    hoverStateEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    itemsChange: EventEmitter<Array<DevExpress.ui.dxMenuItem>>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    itemsExprChange: EventEmitter<Function | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    itemTemplateChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    orientationChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    rtlEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    selectByClickChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    selectedExprChange: EventEmitter<Function | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    selectedItemChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    selectionModeChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    showFirstSubmenuModeChange: EventEmitter<string | {\r\n        delay?: number | {\r\n            hide?: number;\r\n            show?: number;\r\n        };\r\n        name?: string;\r\n    }>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    showSubmenuModeChange: EventEmitter<string | {\r\n        delay?: number | {\r\n            hide?: number;\r\n            show?: number;\r\n        };\r\n        name?: string;\r\n    }>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    submenuDirectionChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    tabIndexChange: EventEmitter<number>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    visibleChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    widthChange: EventEmitter<number | Function | string>;\r\n    itemsChildren: QueryList<DxiItemComponent>;\r\n    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);\r\n    protected _createInstance(element: any, options: any): DxMenu;\r\n    ngOnDestroy(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    setupChanges(prop: string, changes: SimpleChanges): void;\r\n    ngDoCheck(): void;\r\n    _setOption(name: string, value: any): void;\r\n}\r\nexport declare class DxMenuModule {\r\n}\r\n"]}