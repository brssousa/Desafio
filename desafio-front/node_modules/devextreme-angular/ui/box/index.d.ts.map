{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwGA;;;;AAEA","sourcesContent":["/*!\r\n * devextreme-angular\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nimport { TransferState } from '@angular/platform-browser';\r\nimport { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';\r\nimport DevExpress from 'devextreme/bundles/dx.all';\r\nimport { dxBoxOptions } from 'devextreme/ui/box';\r\nimport DxBox from 'devextreme/ui/box';\r\nimport { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';\r\nimport { DxiItemComponent } from 'devextreme-angular/ui/nested';\r\n/** The Box widget allows you to arrange various elements within it. Separate and adaptive, the Box widget acts as a building block for the layout. */\r\nexport declare class DxBoxComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {\r\n    private _watcherHelper;\r\n    private _idh;\r\n    instance: DxBox;\r\n    /** Specifies how widget items are aligned along the main direction. */\r\n    align: string;\r\n    /** Specifies how widget items are aligned cross-wise. */\r\n    crossAlign: string;\r\n    /** Binds the widget to data. */\r\n    dataSource: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<string | DevExpress.ui.dxBoxItem | any>;\r\n    /** Specifies the direction of item positioning in the widget. */\r\n    direction: string;\r\n    /** Specifies whether the widget responds to user interaction. */\r\n    disabled: boolean;\r\n    /** Specifies the attributes to be attached to the widget's root element. */\r\n    elementAttr: any;\r\n    /** Specifies the widget's height. */\r\n    height: number | Function | string;\r\n    /** Specifies whether the widget changes its state when a user pauses on it. */\r\n    hoverStateEnabled: boolean;\r\n    /** The time period in milliseconds before the onItemHold event is raised. */\r\n    itemHoldTimeout: number;\r\n    /** An array of items displayed by the widget. */\r\n    items: Array<string | any | {\r\n        baseSize?: number | string;\r\n        box?: dxBoxOptions;\r\n        disabled?: boolean;\r\n        html?: string;\r\n        ratio?: number;\r\n        shrink?: number;\r\n        template?: any;\r\n        text?: string;\r\n        visible?: boolean;\r\n    }>;\r\n    /** Specifies a custom template for items. */\r\n    itemTemplate: any;\r\n    /** Switches the widget to a right-to-left representation. */\r\n    rtlEnabled: boolean;\r\n    /** Specifies whether the widget is visible. */\r\n    visible: boolean;\r\n    /** Specifies the widget's width. */\r\n    width: number | Function | string;\r\n    /** A function that is executed when the widget's content is ready and each time the content is changed. */\r\n    onContentReady: EventEmitter<any>;\r\n    /** A function that is executed before the widget is disposed of. */\r\n    onDisposing: EventEmitter<any>;\r\n    /** A function used in JavaScript frameworks to save the widget instance. */\r\n    onInitialized: EventEmitter<any>;\r\n    /** A function that is executed when a collection item is clicked or tapped. */\r\n    onItemClick: EventEmitter<any>;\r\n    /** A function that is executed when a collection item is right-clicked or pressed. */\r\n    onItemContextMenu: EventEmitter<any>;\r\n    /** A function that is executed when a collection item has been held for a specified period. */\r\n    onItemHold: EventEmitter<any>;\r\n    /** A function that is executed after a collection item is rendered. */\r\n    onItemRendered: EventEmitter<any>;\r\n    /** A function that is executed after a widget option is changed. */\r\n    onOptionChanged: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    alignChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    crossAlignChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    dataSourceChange: EventEmitter<DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<string | DevExpress.ui.dxBoxItem | any>>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    directionChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    disabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    elementAttrChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    heightChange: EventEmitter<number | Function | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    hoverStateEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    itemHoldTimeoutChange: EventEmitter<number>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    itemsChange: EventEmitter<Array<string | any | {\r\n        baseSize?: number | string;\r\n        box?: dxBoxOptions;\r\n        disabled?: boolean;\r\n        html?: string;\r\n        ratio?: number;\r\n        shrink?: number;\r\n        template?: any;\r\n        text?: string;\r\n        visible?: boolean;\r\n    }>>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    itemTemplateChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    rtlEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    visibleChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    widthChange: EventEmitter<number | Function | string>;\r\n    itemsChildren: QueryList<DxiItemComponent>;\r\n    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);\r\n    protected _createInstance(element: any, options: any): DxBox;\r\n    ngOnDestroy(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    setupChanges(prop: string, changes: SimpleChanges): void;\r\n    ngDoCheck(): void;\r\n    _setOption(name: string, value: any): void;\r\n}\r\nexport declare class DxBoxModule {\r\n}\r\n"]}