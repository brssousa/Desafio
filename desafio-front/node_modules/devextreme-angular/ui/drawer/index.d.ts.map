{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgGA;;;;AAEA","sourcesContent":["/*!\r\n * devextreme-angular\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nimport { TransferState } from '@angular/platform-browser';\r\nimport { ElementRef, NgZone, OnDestroy, EventEmitter } from '@angular/core';\r\nimport DxDrawer from 'devextreme/ui/drawer';\r\nimport { DxComponent, DxTemplateHost, NestedOptionHost, WatcherHelper } from 'devextreme-angular/core';\r\n/** The Drawer is a dismissible or permanently visible panel used for navigation in responsive web application layouts. */\r\nexport declare class DxDrawerComponent extends DxComponent implements OnDestroy {\r\n    instance: DxDrawer;\r\n    /** Specifies whether or not the widget changes its state when interacting with a user. */\r\n    activeStateEnabled: boolean;\r\n    /** Specifies the duration of the drawer's opening and closing animation (in milliseconds). Applies only if animationEnabled is true. */\r\n    animationDuration: number;\r\n    /** Specifies whether to use an opening and closing animation. */\r\n    animationEnabled: boolean;\r\n    /** Specifies whether to close the drawer if a user clicks or taps the view area. */\r\n    closeOnOutsideClick: boolean | Function;\r\n    /** Specifies whether the widget responds to user interaction. */\r\n    disabled: boolean;\r\n    /** Specifies the attributes to be attached to the widget's root element. */\r\n    elementAttr: any;\r\n    /** Specifies the widget's height. */\r\n    height: number | Function | string;\r\n    /** Specifies text for a hint that appears when a user pauses on the widget. */\r\n    hint: string;\r\n    /** Specifies whether the widget changes its state when a user pauses on it. */\r\n    hoverStateEnabled: boolean;\r\n    /** Specifies the drawer's width or height (depending on the drawer's position) in the opened state. */\r\n    maxSize: number;\r\n    /** Specifies the drawer's width or height (depending on the drawer's position) in the closed state. */\r\n    minSize: number;\r\n    /** Specifies whether the drawer is opened. */\r\n    opened: boolean;\r\n    /** Specifies how the drawer interacts with the view in the opened state. */\r\n    openedStateMode: string;\r\n    /** Specifies the drawer's position in relation to the view. */\r\n    position: string;\r\n    /** Specifies the drawer's reveal mode. */\r\n    revealMode: string;\r\n    /** Switches the widget to a right-to-left representation. */\r\n    rtlEnabled: boolean;\r\n    /** Specifies whether to shade the view when the drawer is opened. */\r\n    shading: boolean;\r\n    /** @deprecated  */\r\n    /** Specifies a CSS selector for the element in which the drawer should be rendered. Applies only when the openedStateMode is \"overlap\". */\r\n    target: Element | JQuery | string;\r\n    /** Specifies the drawer's content. */\r\n    template: any;\r\n    /** Specifies whether the widget is visible. */\r\n    visible: boolean;\r\n    /** Specifies the widget's width. */\r\n    width: number | Function | string;\r\n    /** A function that is executed before the widget is disposed of. */\r\n    onDisposing: EventEmitter<any>;\r\n    /** A function used in JavaScript frameworks to save the widget instance. */\r\n    onInitialized: EventEmitter<any>;\r\n    /** A function that is executed after a widget option is changed. */\r\n    onOptionChanged: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    activeStateEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    animationDurationChange: EventEmitter<number>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    animationEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    closeOnOutsideClickChange: EventEmitter<boolean | Function>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    disabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    elementAttrChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    heightChange: EventEmitter<number | Function | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    hintChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    hoverStateEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    maxSizeChange: EventEmitter<number>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    minSizeChange: EventEmitter<number>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    openedChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    openedStateModeChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    positionChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    revealModeChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    rtlEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    shadingChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    targetChange: EventEmitter<Element | JQuery | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    templateChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    visibleChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    widthChange: EventEmitter<number | Function | string>;\r\n    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);\r\n    protected _createInstance(element: any, options: any): DxDrawer;\r\n    ngOnDestroy(): void;\r\n}\r\nexport declare class DxDrawerModule {\r\n}\r\n"]}