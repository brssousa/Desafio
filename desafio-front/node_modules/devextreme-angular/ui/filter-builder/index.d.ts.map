{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyJA;;;;AAEA","sourcesContent":["/*!\r\n * devextreme-angular\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nimport { TransferState } from '@angular/platform-browser';\r\nimport { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';\r\nimport DevExpress from 'devextreme/bundles/dx.all';\r\nimport DxFilterBuilder from 'devextreme/ui/filter_builder';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';\r\nimport { DxiCustomOperationComponent } from 'devextreme-angular/ui/nested';\r\nimport { DxiFieldComponent } from 'devextreme-angular/ui/nested';\r\n/** The FilterBuilder widget allows a user to build complex filter expressions with an unlimited number of filter conditions, combined by logical operations using the UI. */\r\nexport declare class DxFilterBuilderComponent extends DxComponent implements OnDestroy, ControlValueAccessor, OnChanges, DoCheck {\r\n    private _watcherHelper;\r\n    private _idh;\r\n    instance: DxFilterBuilder;\r\n    /** Specifies the shortcut key that sets focus on the widget. */\r\n    accessKey: string;\r\n    /** Specifies whether or not the widget changes its state when interacting with a user. */\r\n    activeStateEnabled: boolean;\r\n    /** Specifies whether the widget can display hierarchical data fields. */\r\n    allowHierarchicalFields: boolean;\r\n    /** Configures custom filter operations. */\r\n    customOperations: Array<DevExpress.ui.dxFilterBuilderCustomOperation>;\r\n    /** Specifies whether the widget responds to user interaction. */\r\n    disabled: boolean;\r\n    /** Specifies the attributes to be attached to the widget's root element. */\r\n    elementAttr: any;\r\n    /** Configures fields. */\r\n    fields: Array<DevExpress.ui.dxFilterBuilderField>;\r\n    /** Specifies filter operation descriptions. */\r\n    filterOperationDescriptions: {\r\n        between?: string;\r\n        contains?: string;\r\n        endsWith?: string;\r\n        equal?: string;\r\n        greaterThan?: string;\r\n        greaterThanOrEqual?: string;\r\n        isBlank?: string;\r\n        isNotBlank?: string;\r\n        lessThan?: string;\r\n        lessThanOrEqual?: string;\r\n        notContains?: string;\r\n        notEqual?: string;\r\n        startsWith?: string;\r\n    };\r\n    /** Specifies whether the widget can be focused using keyboard navigation. */\r\n    focusStateEnabled: boolean;\r\n    /** Specifies group operation descriptions. */\r\n    groupOperationDescriptions: {\r\n        and?: string;\r\n        notAnd?: string;\r\n        notOr?: string;\r\n        or?: string;\r\n    };\r\n    /** Specifies a set of available group operations. */\r\n    groupOperations: Array<string>;\r\n    /** Specifies the widget's height. */\r\n    height: number | Function | string;\r\n    /** Specifies text for a hint that appears when a user pauses on the widget. */\r\n    hint: string;\r\n    /** Specifies whether the widget changes its state when a user pauses on it. */\r\n    hoverStateEnabled: boolean;\r\n    /** Specifies groups' maximum nesting level. */\r\n    maxGroupLevel: number;\r\n    /** Switches the widget to a right-to-left representation. */\r\n    rtlEnabled: boolean;\r\n    /** Specifies the number of the element when the Tab key is used for navigating. */\r\n    tabIndex: number;\r\n    /** Allows you to specify a filter. */\r\n    value: any;\r\n    /** Specifies whether the widget is visible. */\r\n    visible: boolean;\r\n    /** Specifies the widget's width. */\r\n    width: number | Function | string;\r\n    /** A function that is executed when the widget's content is ready and each time the content is changed. */\r\n    onContentReady: EventEmitter<any>;\r\n    /** A function that is executed before the widget is disposed of. */\r\n    onDisposing: EventEmitter<any>;\r\n    /** A function that is executed after an editor is created. */\r\n    onEditorPrepared: EventEmitter<any>;\r\n    /** A function that is executed before an editor is created. */\r\n    onEditorPreparing: EventEmitter<any>;\r\n    /** A function used in JavaScript frameworks to save the widget instance. */\r\n    onInitialized: EventEmitter<any>;\r\n    /** A function that is executed after a widget option is changed. */\r\n    onOptionChanged: EventEmitter<any>;\r\n    /** A function that is executed after the widget's value is changed. */\r\n    onValueChanged: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    accessKeyChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    activeStateEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    allowHierarchicalFieldsChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    customOperationsChange: EventEmitter<Array<DevExpress.ui.dxFilterBuilderCustomOperation>>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    disabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    elementAttrChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    fieldsChange: EventEmitter<Array<DevExpress.ui.dxFilterBuilderField>>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    filterOperationDescriptionsChange: EventEmitter<{\r\n        between?: string;\r\n        contains?: string;\r\n        endsWith?: string;\r\n        equal?: string;\r\n        greaterThan?: string;\r\n        greaterThanOrEqual?: string;\r\n        isBlank?: string;\r\n        isNotBlank?: string;\r\n        lessThan?: string;\r\n        lessThanOrEqual?: string;\r\n        notContains?: string;\r\n        notEqual?: string;\r\n        startsWith?: string;\r\n    }>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    focusStateEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    groupOperationDescriptionsChange: EventEmitter<{\r\n        and?: string;\r\n        notAnd?: string;\r\n        notOr?: string;\r\n        or?: string;\r\n    }>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    groupOperationsChange: EventEmitter<Array<string>>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    heightChange: EventEmitter<number | Function | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    hintChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    hoverStateEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    maxGroupLevelChange: EventEmitter<number>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    rtlEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    tabIndexChange: EventEmitter<number>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    valueChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    visibleChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    widthChange: EventEmitter<number | Function | string>;\r\n    onBlur: EventEmitter<any>;\r\n    change(_: any): void;\r\n    touched: (_: any) => void;\r\n    customOperationsChildren: QueryList<DxiCustomOperationComponent>;\r\n    fieldsChildren: QueryList<DxiFieldComponent>;\r\n    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);\r\n    protected _createInstance(element: any, options: any): DxFilterBuilder;\r\n    writeValue(value: any): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    registerOnChange(fn: (_: any) => void): void;\r\n    registerOnTouched(fn: () => void): void;\r\n    _createWidget(element: any): void;\r\n    ngOnDestroy(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    setupChanges(prop: string, changes: SimpleChanges): void;\r\n    ngDoCheck(): void;\r\n    _setOption(name: string, value: any): void;\r\n}\r\nexport declare class DxFilterBuilderModule {\r\n}\r\n"]}