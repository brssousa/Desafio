{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwKA;;;;AAEA","sourcesContent":["/*!\r\n * devextreme-angular\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nimport { TransferState } from '@angular/platform-browser';\r\nimport { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';\r\nimport DevExpress from 'devextreme/bundles/dx.all';\r\nimport { dxPopupOptions } from 'devextreme/ui/popup';\r\nimport DxDropDownButton from 'devextreme/ui/drop_down_button';\r\nimport { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';\r\nimport { DxiItemComponent } from 'devextreme-angular/ui/nested';\r\n/** The DropDownButton is a button that opens a drop-down menu. */\r\nexport declare class DxDropDownButtonComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {\r\n    private _watcherHelper;\r\n    private _idh;\r\n    instance: DxDropDownButton;\r\n    /** Specifies the shortcut key that sets focus on the widget. */\r\n    accessKey: string;\r\n    /** Specifies whether or not the widget changes its state when interacting with a user. */\r\n    activeStateEnabled: boolean;\r\n    /** Provides data for the drop-down menu. */\r\n    dataSource: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<DevExpress.ui.dxDropDownButtonItem | any>;\r\n    /** Specifies whether to wait until the drop-down menu is opened the first time to render its content. */\r\n    deferRendering: boolean;\r\n    /** Specifies whether the widget responds to user interaction. */\r\n    disabled: boolean;\r\n    /** Specifies the data field whose values should be displayed in the drop-down menu. */\r\n    displayExpr: Function | string;\r\n    /** Specifies custom content for the drop-down field. */\r\n    dropDownContentTemplate: any;\r\n    /** Configures the drop-down field. */\r\n    dropDownOptions: dxPopupOptions;\r\n    /** Specifies the attributes to be attached to the widget's root element. */\r\n    elementAttr: any;\r\n    /** Specifies whether users can use keyboard to focus the widget. */\r\n    focusStateEnabled: boolean;\r\n    /** Specifies the widget's height. */\r\n    height: number | Function | string;\r\n    /** Specifies text for a hint that appears when a user pauses on the widget. */\r\n    hint: string;\r\n    /** Specifies whether the widget changes its state when a user hovers the mouse pointer over it. */\r\n    hoverStateEnabled: boolean;\r\n    /** Specifies the button's icon. */\r\n    icon: string;\r\n    /** Provides drop-down menu items. */\r\n    items: Array<any | {\r\n        badge?: string;\r\n        disabled?: boolean;\r\n        html?: string;\r\n        icon?: string;\r\n        onClick?: Function | string;\r\n        template?: any;\r\n        text?: string;\r\n        visible?: boolean;\r\n    }>;\r\n    /** Specifies a custom template for drop-down menu items. */\r\n    itemTemplate: any;\r\n    /** Specifies which data field provides keys used to distinguish between the selected drop-down menu items. */\r\n    keyExpr: string;\r\n    /** Specifies text or HTML markup displayed in the drop-down menu when it does not contain any items. */\r\n    noDataText: string;\r\n    /** Specifies whether the drop-down menu is opened. */\r\n    opened: boolean;\r\n    /** Switches the widget to a right-to-left representation. */\r\n    rtlEnabled: boolean;\r\n    /** Contains the selected item's data. Available when useSelectMode is true. */\r\n    selectedItem: any | number | string;\r\n    /** Contains the selected item's key and allows you to specify the initially selected item. Applies when useSelectMode is true. */\r\n    selectedItemKey: number | string;\r\n    /** Specifies whether the arrow icon should be displayed. */\r\n    showArrowIcon: boolean;\r\n    /** Specifies whether to split the button in two: one executes an action, the other opens and closes the drop-down menu. */\r\n    splitButton: boolean;\r\n    /** Specifies how the button is styled. */\r\n    stylingMode: string;\r\n    /** Specifies the number of the element when the Tab key is used for navigating. */\r\n    tabIndex: number;\r\n    /** Specifies the button's text. Applies only if useSelectMode is false. */\r\n    text: string;\r\n    /** Specifies whether the widget stores the selected drop-down menu item. */\r\n    useSelectMode: boolean;\r\n    /** Specifies whether the widget is visible. */\r\n    visible: boolean;\r\n    /** Specifies the widget's width. */\r\n    width: number | Function | string;\r\n    /** Specifies whether text that exceeds the drop-down list width should be wrapped. */\r\n    wrapItemText: boolean;\r\n    /** A function that is executed when the button is clicked or tapped. If splitButton is true, this function is executed for the action button only. */\r\n    onButtonClick: EventEmitter<any>;\r\n    /** A function that is executed when the widget's content is ready and each time the content is changed. */\r\n    onContentReady: EventEmitter<any>;\r\n    /** A function that is executed before the widget is disposed of. */\r\n    onDisposing: EventEmitter<any>;\r\n    /** A function used in JavaScript frameworks to save the widget instance. */\r\n    onInitialized: EventEmitter<any>;\r\n    /** A function that is executed when a drop-down menu item is clicked. */\r\n    onItemClick: EventEmitter<any>;\r\n    /** A function that is executed after a widget option is changed. */\r\n    onOptionChanged: EventEmitter<any>;\r\n    /** A function that is executed when an item is selected or selection is canceled. In effect when useSelectMode is true. */\r\n    onSelectionChanged: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    accessKeyChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    activeStateEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    dataSourceChange: EventEmitter<DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<DevExpress.ui.dxDropDownButtonItem | any>>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    deferRenderingChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    disabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    displayExprChange: EventEmitter<Function | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    dropDownContentTemplateChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    dropDownOptionsChange: EventEmitter<dxPopupOptions>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    elementAttrChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    focusStateEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    heightChange: EventEmitter<number | Function | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    hintChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    hoverStateEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    iconChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    itemsChange: EventEmitter<Array<any | {\r\n        badge?: string;\r\n        disabled?: boolean;\r\n        html?: string;\r\n        icon?: string;\r\n        onClick?: Function | string;\r\n        template?: any;\r\n        text?: string;\r\n        visible?: boolean;\r\n    }>>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    itemTemplateChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    keyExprChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    noDataTextChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    openedChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    rtlEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    selectedItemChange: EventEmitter<any | number | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    selectedItemKeyChange: EventEmitter<number | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    showArrowIconChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    splitButtonChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    stylingModeChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    tabIndexChange: EventEmitter<number>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    textChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    useSelectModeChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    visibleChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    widthChange: EventEmitter<number | Function | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    wrapItemTextChange: EventEmitter<boolean>;\r\n    itemsChildren: QueryList<DxiItemComponent>;\r\n    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);\r\n    protected _createInstance(element: any, options: any): DxDropDownButton;\r\n    ngOnDestroy(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    setupChanges(prop: string, changes: SimpleChanges): void;\r\n    ngDoCheck(): void;\r\n    _setOption(name: string, value: any): void;\r\n}\r\nexport declare class DxDropDownButtonModule {\r\n}\r\n"]}