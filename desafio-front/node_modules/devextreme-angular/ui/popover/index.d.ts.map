{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoLA;;;;AAEA","sourcesContent":["/*!\r\n * devextreme-angular\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nimport { TransferState } from '@angular/platform-browser';\r\nimport { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';\r\nimport { animationConfig } from 'devextreme/animation/fx';\r\nimport DevExpress from 'devextreme/bundles/dx.all';\r\nimport DxPopover from 'devextreme/ui/popover';\r\nimport { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';\r\nimport { DxiToolbarItemComponent } from 'devextreme-angular/ui/nested';\r\n/** The Popover is a widget that shows notifications within a box with an arrow pointing to a specified UI element. */\r\nexport declare class DxPopoverComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {\r\n    private _watcherHelper;\r\n    private _idh;\r\n    instance: DxPopover;\r\n    /** Configures widget visibility animations. This object contains two fields: show and hide. */\r\n    animation: {\r\n        hide?: animationConfig;\r\n        show?: animationConfig;\r\n    };\r\n    /** A Boolean value specifying whether or not the widget is closed if a user clicks outside of the popover window and outside the target element. */\r\n    closeOnOutsideClick: boolean | Function;\r\n    /** Specifies the container in which to render the widget. */\r\n    container: Element | JQuery | string;\r\n    /** Specifies a custom template for the widget content. */\r\n    contentTemplate: any;\r\n    /** Specifies whether to render the widget's content when it is displayed. If false, the content is rendered immediately. */\r\n    deferRendering: boolean;\r\n    /** Specifies whether the widget responds to user interaction. */\r\n    disabled: boolean;\r\n    /** Specifies the attributes to be attached to the widget's root element. */\r\n    elementAttr: any;\r\n    /** Specifies the widget's height. */\r\n    height: number | Function | string;\r\n    /** Specifies options of popover hiding. */\r\n    hideEvent: string | {\r\n        delay?: number;\r\n        name?: string;\r\n    };\r\n    /** Specifies text for a hint that appears when a user pauses on the widget. */\r\n    hint: string;\r\n    /** Specifies whether the widget changes its state when a user pauses on it. */\r\n    hoverStateEnabled: boolean;\r\n    /** Specifies the maximum height the widget can reach while resizing. */\r\n    maxHeight: number | Function | string;\r\n    /** Specifies the maximum width the widget can reach while resizing. */\r\n    maxWidth: number | Function | string;\r\n    /** Specifies the minimum height the widget can reach while resizing. */\r\n    minHeight: number | Function | string;\r\n    /** Specifies the minimum width the widget can reach while resizing. */\r\n    minWidth: number | Function | string;\r\n    /** An object defining widget positioning options. */\r\n    position: DevExpress.positionConfig | string;\r\n    /** Switches the widget to a right-to-left representation. */\r\n    rtlEnabled: boolean;\r\n    /** Specifies whether to shade the background when the widget is active. */\r\n    shading: boolean;\r\n    /** Specifies the shading color. Applies only if shading is enabled. */\r\n    shadingColor: string;\r\n    /** Specifies whether or not the widget displays the Close button. */\r\n    showCloseButton: boolean;\r\n    /** Specifies options for displaying the widget. */\r\n    showEvent: string | {\r\n        delay?: number;\r\n        name?: string;\r\n    };\r\n    /** A Boolean value specifying whether or not to display the title in the overlay window. */\r\n    showTitle: boolean;\r\n    /** The target element associated with the widget. */\r\n    target: Element | JQuery | string;\r\n    /** The title in the overlay window. */\r\n    title: string;\r\n    /** Specifies a custom template for the widget title. Does not apply if the title is defined. */\r\n    titleTemplate: any;\r\n    /** Configures toolbar items. */\r\n    toolbarItems: Array<any | {\r\n        disabled?: boolean;\r\n        html?: string;\r\n        location?: string;\r\n        options?: any;\r\n        template?: any;\r\n        text?: string;\r\n        toolbar?: string;\r\n        visible?: boolean;\r\n        widget?: string;\r\n    }>;\r\n    /** A Boolean value specifying whether or not the widget is visible. */\r\n    visible: boolean;\r\n    /** Specifies the widget's width. */\r\n    width: number | Function | string;\r\n    /** A function that is executed when the widget's content is ready and each time the content is changed. */\r\n    onContentReady: EventEmitter<any>;\r\n    /** A function that is executed before the widget is disposed of. */\r\n    onDisposing: EventEmitter<any>;\r\n    /** A function that is executed after the widget is hidden. */\r\n    onHidden: EventEmitter<any>;\r\n    /** A function that is executed before the widget is hidden. */\r\n    onHiding: EventEmitter<any>;\r\n    /** A function used in JavaScript frameworks to save the widget instance. */\r\n    onInitialized: EventEmitter<any>;\r\n    /** A function that is executed after a widget option is changed. */\r\n    onOptionChanged: EventEmitter<any>;\r\n    /** A function that is executed before the widget is displayed. */\r\n    onShowing: EventEmitter<any>;\r\n    /** A function that is executed after the widget is displayed. */\r\n    onShown: EventEmitter<any>;\r\n    /** A function that is executed when the widget's title is rendered. */\r\n    onTitleRendered: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    animationChange: EventEmitter<{\r\n        hide?: animationConfig;\r\n        show?: animationConfig;\r\n    }>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    closeOnOutsideClickChange: EventEmitter<boolean | Function>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    containerChange: EventEmitter<Element | JQuery | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    contentTemplateChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    deferRenderingChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    disabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    elementAttrChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    heightChange: EventEmitter<number | Function | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    hideEventChange: EventEmitter<string | {\r\n        delay?: number;\r\n        name?: string;\r\n    }>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    hintChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    hoverStateEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    maxHeightChange: EventEmitter<number | Function | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    maxWidthChange: EventEmitter<number | Function | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    minHeightChange: EventEmitter<number | Function | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    minWidthChange: EventEmitter<number | Function | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    positionChange: EventEmitter<DevExpress.positionConfig | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    rtlEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    shadingChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    shadingColorChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    showCloseButtonChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    showEventChange: EventEmitter<string | {\r\n        delay?: number;\r\n        name?: string;\r\n    }>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    showTitleChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    targetChange: EventEmitter<Element | JQuery | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    titleChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    titleTemplateChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    toolbarItemsChange: EventEmitter<Array<any | {\r\n        disabled?: boolean;\r\n        html?: string;\r\n        location?: string;\r\n        options?: any;\r\n        template?: any;\r\n        text?: string;\r\n        toolbar?: string;\r\n        visible?: boolean;\r\n        widget?: string;\r\n    }>>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    visibleChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    widthChange: EventEmitter<number | Function | string>;\r\n    toolbarItemsChildren: QueryList<DxiToolbarItemComponent>;\r\n    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);\r\n    protected _createInstance(element: any, options: any): DxPopover;\r\n    ngOnDestroy(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    setupChanges(prop: string, changes: SimpleChanges): void;\r\n    ngDoCheck(): void;\r\n    _setOption(name: string, value: any): void;\r\n}\r\nexport declare class DxPopoverModule {\r\n}\r\n"]}