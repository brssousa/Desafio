{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAscA;;;;AAEA","sourcesContent":["/*!\r\n * devextreme-angular\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nimport { TransferState } from '@angular/platform-browser';\r\nimport { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';\r\nimport DevExpress from 'devextreme/bundles/dx.all';\r\nimport { format } from 'devextreme/ui/widget/ui.widget';\r\nimport { Font } from 'devextreme/viz/core/base_widget';\r\nimport DxPieChart from 'devextreme/viz/pie_chart';\r\nimport { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';\r\nimport { DxiSeriesComponent } from 'devextreme-angular/ui/nested';\r\n/** The PieChart is a widget that visualizes data as a circle divided into sectors that each represents a portion of the whole. */\r\nexport declare class DxPieChartComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {\r\n    private _watcherHelper;\r\n    private _idh;\r\n    instance: DxPieChart;\r\n    /** Specifies adaptive layout options. */\r\n    adaptiveLayout: {\r\n        height?: number;\r\n        keepLabels?: boolean;\r\n        width?: number;\r\n    };\r\n    /** Specifies animation options. */\r\n    animation: boolean | {\r\n        duration?: number;\r\n        easing?: string;\r\n        enabled?: boolean;\r\n        maxPointCountSupported?: number;\r\n    };\r\n    /** Specifies a custom template for content in the pie's center. */\r\n    centerTemplate: any;\r\n    /** An object defining the configuration options that are common for all series of the PieChart widget. */\r\n    commonSeriesSettings: any;\r\n    /** Customizes the appearance of an individual point label. */\r\n    customizeLabel: Function;\r\n    /** Customizes the appearance of an individual series point. */\r\n    customizePoint: Function;\r\n    /** Binds the widget to data. */\r\n    dataSource: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<any>;\r\n    /** Specifies the diameter of the pie. */\r\n    diameter: number;\r\n    /** Specifies whether the widget responds to user interaction. */\r\n    disabled: boolean;\r\n    /** Specifies the attributes to be attached to the widget's root element. */\r\n    elementAttr: any;\r\n    /** Configures the exporting and printing features. */\r\n    export: {\r\n        backgroundColor?: string;\r\n        enabled?: boolean;\r\n        fileName?: string;\r\n        formats?: Array<string>;\r\n        margin?: number;\r\n        printingEnabled?: boolean;\r\n        proxyUrl?: string;\r\n        svgToCanvas?: Function;\r\n    };\r\n    /** Specifies the fraction of the inner radius relative to the total radius in the series of the 'doughnut' type. The value should be between 0 and 1. */\r\n    innerRadius: number;\r\n    /** Specifies PieChart legend options. */\r\n    legend: {\r\n        backgroundColor?: string;\r\n        border?: {\r\n            color?: string;\r\n            cornerRadius?: number;\r\n            dashStyle?: string;\r\n            opacity?: number;\r\n            visible?: boolean;\r\n            width?: number;\r\n        };\r\n        columnCount?: number;\r\n        columnItemSpacing?: number;\r\n        customizeHint?: Function;\r\n        customizeItems?: Function;\r\n        customizeText?: Function;\r\n        font?: Font;\r\n        horizontalAlignment?: string;\r\n        hoverMode?: string;\r\n        itemsAlignment?: string;\r\n        itemTextPosition?: string;\r\n        margin?: number | {\r\n            bottom?: number;\r\n            left?: number;\r\n            right?: number;\r\n            top?: number;\r\n        };\r\n        markerSize?: number;\r\n        markerTemplate?: any;\r\n        orientation?: string;\r\n        paddingLeftRight?: number;\r\n        paddingTopBottom?: number;\r\n        rowCount?: number;\r\n        rowItemSpacing?: number;\r\n        title?: string | {\r\n            font?: DevExpress.viz.Font;\r\n            horizontalAlignment?: string;\r\n            margin?: {\r\n                bottom?: number;\r\n                left?: number;\r\n                right?: number;\r\n                top?: number;\r\n            };\r\n            placeholderSize?: number;\r\n            subtitle?: string | {\r\n                font?: DevExpress.viz.Font;\r\n                offset?: number;\r\n                text?: string;\r\n            };\r\n            text?: string;\r\n            verticalAlignment?: string;\r\n        };\r\n        verticalAlignment?: string;\r\n        visible?: boolean;\r\n    };\r\n    /** Configures the loading indicator. */\r\n    loadingIndicator: {\r\n        backgroundColor?: string;\r\n        enabled?: boolean;\r\n        font?: Font;\r\n        show?: boolean;\r\n        text?: string;\r\n    };\r\n    /** Generates space around the widget. */\r\n    margin: {\r\n        bottom?: number;\r\n        left?: number;\r\n        right?: number;\r\n        top?: number;\r\n    };\r\n    /** Specifies the minimum diameter of the pie. */\r\n    minDiameter: number;\r\n    /** Sets the palette to be used to colorize series and their elements. */\r\n    palette: string | Array<string>;\r\n    /** Specifies what to do with colors in the palette when their number is less than the number of series (in the Chart widget) or points in a series (in the PieChart widget). */\r\n    paletteExtensionMode: string;\r\n    /** Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path. */\r\n    pathModified: boolean;\r\n    /** Specifies whether a single point or multiple points can be selected in the chart. */\r\n    pointSelectionMode: string;\r\n    /** Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates. */\r\n    redrawOnResize: boolean;\r\n    /** Specifies how a chart must behave when point labels overlap. */\r\n    resolveLabelOverlapping: string;\r\n    /** Switches the widget to a right-to-left representation. */\r\n    rtlEnabled: boolean;\r\n    /** Specifies the direction that the pie chart segments will occupy. */\r\n    segmentsDirection: string;\r\n    /** Specifies options for the series of the PieChart widget. */\r\n    series: any | Array<any>;\r\n    /** Defines options for the series template. */\r\n    seriesTemplate: {\r\n        customizeSeries?: Function;\r\n        nameField?: string;\r\n    };\r\n    /** Specifies the widget's size in pixels. */\r\n    size: {\r\n        height?: number;\r\n        width?: number;\r\n    };\r\n    /** Allows you to display several adjoining pies in the same size. */\r\n    sizeGroup: string;\r\n    /** Specifies the angle in arc degrees from which the first segment of a pie chart should start. */\r\n    startAngle: number;\r\n    /** Sets the name of the theme the widget uses. */\r\n    theme: string;\r\n    /** Configures the widget's title. */\r\n    title: string | {\r\n        font?: Font;\r\n        horizontalAlignment?: string;\r\n        margin?: number | {\r\n            bottom?: number;\r\n            left?: number;\r\n            right?: number;\r\n            top?: number;\r\n        };\r\n        placeholderSize?: number;\r\n        subtitle?: string | {\r\n            font?: DevExpress.viz.Font;\r\n            offset?: number;\r\n            text?: string;\r\n            textOverflow?: string;\r\n            wordWrap?: string;\r\n        };\r\n        text?: string;\r\n        textOverflow?: string;\r\n        verticalAlignment?: string;\r\n        wordWrap?: string;\r\n    };\r\n    /** Configures tooltips. */\r\n    tooltip: {\r\n        argumentFormat?: format | string;\r\n        arrowLength?: number;\r\n        border?: {\r\n            color?: string;\r\n            dashStyle?: string;\r\n            opacity?: number;\r\n            visible?: boolean;\r\n            width?: number;\r\n        };\r\n        color?: string;\r\n        container?: Element | JQuery | string;\r\n        contentTemplate?: any;\r\n        cornerRadius?: number;\r\n        customizeTooltip?: Function;\r\n        enabled?: boolean;\r\n        font?: Font;\r\n        format?: format | string;\r\n        interactive?: boolean;\r\n        opacity?: number;\r\n        paddingLeftRight?: number;\r\n        paddingTopBottom?: number;\r\n        shadow?: {\r\n            blur?: number;\r\n            color?: string;\r\n            offsetX?: number;\r\n            offsetY?: number;\r\n            opacity?: number;\r\n        };\r\n        shared?: boolean;\r\n        zIndex?: number;\r\n    };\r\n    /** Specifies the type of the pie chart series. */\r\n    type: string;\r\n    /** A function that is executed before the widget is disposed of. */\r\n    onDisposing: EventEmitter<any>;\r\n    /** A function that is executed when all series are ready. */\r\n    onDone: EventEmitter<any>;\r\n    /** A function that is executed when the widget's rendering has finished. */\r\n    onDrawn: EventEmitter<any>;\r\n    /** A function that is executed after the widget is exported. */\r\n    onExported: EventEmitter<any>;\r\n    /** A function that is executed before the widget is exported. */\r\n    onExporting: EventEmitter<any>;\r\n    /** A function that is executed before a file with exported widget is saved to the user's local storage. */\r\n    onFileSaving: EventEmitter<any>;\r\n    /** A function that is executed when an error or warning occurs. */\r\n    onIncidentOccurred: EventEmitter<any>;\r\n    /** A function used in JavaScript frameworks to save the widget instance. */\r\n    onInitialized: EventEmitter<any>;\r\n    /** A function that is executed when a legend item is clicked or tapped. */\r\n    onLegendClick: EventEmitter<any>;\r\n    /** A function that is executed after a widget option is changed. */\r\n    onOptionChanged: EventEmitter<any>;\r\n    /** A function that is executed when a series point is clicked or tapped. */\r\n    onPointClick: EventEmitter<any>;\r\n    /** A function that is executed after the pointer enters or leaves a series point. */\r\n    onPointHoverChanged: EventEmitter<any>;\r\n    /** A function that is executed when a series point is selected or selection is canceled. */\r\n    onPointSelectionChanged: EventEmitter<any>;\r\n    /** A function that is executed when a tooltip becomes hidden. */\r\n    onTooltipHidden: EventEmitter<any>;\r\n    /** A function that is executed when a tooltip appears. */\r\n    onTooltipShown: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    adaptiveLayoutChange: EventEmitter<{\r\n        height?: number;\r\n        keepLabels?: boolean;\r\n        width?: number;\r\n    }>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    animationChange: EventEmitter<boolean | {\r\n        duration?: number;\r\n        easing?: string;\r\n        enabled?: boolean;\r\n        maxPointCountSupported?: number;\r\n    }>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    centerTemplateChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    commonSeriesSettingsChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    customizeLabelChange: EventEmitter<Function>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    customizePointChange: EventEmitter<Function>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    dataSourceChange: EventEmitter<DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<any>>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    diameterChange: EventEmitter<number>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    disabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    elementAttrChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    exportChange: EventEmitter<{\r\n        backgroundColor?: string;\r\n        enabled?: boolean;\r\n        fileName?: string;\r\n        formats?: Array<string>;\r\n        margin?: number;\r\n        printingEnabled?: boolean;\r\n        proxyUrl?: string;\r\n        svgToCanvas?: Function;\r\n    }>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    innerRadiusChange: EventEmitter<number>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    legendChange: EventEmitter<{\r\n        backgroundColor?: string;\r\n        border?: {\r\n            color?: string;\r\n            cornerRadius?: number;\r\n            dashStyle?: string;\r\n            opacity?: number;\r\n            visible?: boolean;\r\n            width?: number;\r\n        };\r\n        columnCount?: number;\r\n        columnItemSpacing?: number;\r\n        customizeHint?: Function;\r\n        customizeItems?: Function;\r\n        customizeText?: Function;\r\n        font?: Font;\r\n        horizontalAlignment?: string;\r\n        hoverMode?: string;\r\n        itemsAlignment?: string;\r\n        itemTextPosition?: string;\r\n        margin?: number | {\r\n            bottom?: number;\r\n            left?: number;\r\n            right?: number;\r\n            top?: number;\r\n        };\r\n        markerSize?: number;\r\n        markerTemplate?: any;\r\n        orientation?: string;\r\n        paddingLeftRight?: number;\r\n        paddingTopBottom?: number;\r\n        rowCount?: number;\r\n        rowItemSpacing?: number;\r\n        title?: string | {\r\n            font?: DevExpress.viz.Font;\r\n            horizontalAlignment?: string;\r\n            margin?: {\r\n                bottom?: number;\r\n                left?: number;\r\n                right?: number;\r\n                top?: number;\r\n            };\r\n            placeholderSize?: number;\r\n            subtitle?: string | {\r\n                font?: DevExpress.viz.Font;\r\n                offset?: number;\r\n                text?: string;\r\n            };\r\n            text?: string;\r\n            verticalAlignment?: string;\r\n        };\r\n        verticalAlignment?: string;\r\n        visible?: boolean;\r\n    }>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    loadingIndicatorChange: EventEmitter<{\r\n        backgroundColor?: string;\r\n        enabled?: boolean;\r\n        font?: Font;\r\n        show?: boolean;\r\n        text?: string;\r\n    }>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    marginChange: EventEmitter<{\r\n        bottom?: number;\r\n        left?: number;\r\n        right?: number;\r\n        top?: number;\r\n    }>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    minDiameterChange: EventEmitter<number>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    paletteChange: EventEmitter<string | Array<string>>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    paletteExtensionModeChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    pathModifiedChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    pointSelectionModeChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    redrawOnResizeChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    resolveLabelOverlappingChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    rtlEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    segmentsDirectionChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    seriesChange: EventEmitter<any | Array<any>>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    seriesTemplateChange: EventEmitter<{\r\n        customizeSeries?: Function;\r\n        nameField?: string;\r\n    }>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    sizeChange: EventEmitter<{\r\n        height?: number;\r\n        width?: number;\r\n    }>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    sizeGroupChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    startAngleChange: EventEmitter<number>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    themeChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    titleChange: EventEmitter<string | {\r\n        font?: Font;\r\n        horizontalAlignment?: string;\r\n        margin?: number | {\r\n            bottom?: number;\r\n            left?: number;\r\n            right?: number;\r\n            top?: number;\r\n        };\r\n        placeholderSize?: number;\r\n        subtitle?: string | {\r\n            font?: DevExpress.viz.Font;\r\n            offset?: number;\r\n            text?: string;\r\n            textOverflow?: string;\r\n            wordWrap?: string;\r\n        };\r\n        text?: string;\r\n        textOverflow?: string;\r\n        verticalAlignment?: string;\r\n        wordWrap?: string;\r\n    }>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    tooltipChange: EventEmitter<{\r\n        argumentFormat?: format | string;\r\n        arrowLength?: number;\r\n        border?: {\r\n            color?: string;\r\n            dashStyle?: string;\r\n            opacity?: number;\r\n            visible?: boolean;\r\n            width?: number;\r\n        };\r\n        color?: string;\r\n        container?: Element | JQuery | string;\r\n        contentTemplate?: any;\r\n        cornerRadius?: number;\r\n        customizeTooltip?: Function;\r\n        enabled?: boolean;\r\n        font?: Font;\r\n        format?: format | string;\r\n        interactive?: boolean;\r\n        opacity?: number;\r\n        paddingLeftRight?: number;\r\n        paddingTopBottom?: number;\r\n        shadow?: {\r\n            blur?: number;\r\n            color?: string;\r\n            offsetX?: number;\r\n            offsetY?: number;\r\n            opacity?: number;\r\n        };\r\n        shared?: boolean;\r\n        zIndex?: number;\r\n    }>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    typeChange: EventEmitter<string>;\r\n    seriesChildren: QueryList<DxiSeriesComponent>;\r\n    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);\r\n    protected _createInstance(element: any, options: any): DxPieChart;\r\n    ngOnDestroy(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    setupChanges(prop: string, changes: SimpleChanges): void;\r\n    ngDoCheck(): void;\r\n    _setOption(name: string, value: any): void;\r\n}\r\nexport declare class DxPieChartModule {\r\n}\r\n"]}