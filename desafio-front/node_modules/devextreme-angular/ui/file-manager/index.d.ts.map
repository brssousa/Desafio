{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiLA;;;;AAEA","sourcesContent":["/*!\r\n * devextreme-angular\r\n * Version: 20.1.7\r\n * Build date: Tue Aug 25 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the MIT license. See the LICENSE file in the root of the project for details.\r\n *\r\n * https://github.com/DevExpress/devextreme-angular\r\n */\r\nimport { TransferState } from '@angular/platform-browser';\r\nimport { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges } from '@angular/core';\r\nimport DevExpress from 'devextreme/bundles/dx.all';\r\nimport { dxFileManagerContextMenu, dxFileManagerToolbar } from 'devextreme/ui/file_manager';\r\nimport DxFileManager from 'devextreme/ui/file_manager';\r\nimport { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';\r\n/** The FileManager is a widget that allows users to upload, select, and manage files and directories in different file storages. */\r\nexport declare class DxFileManagerComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {\r\n    private _watcherHelper;\r\n    private _idh;\r\n    instance: DxFileManager;\r\n    /** Specifies the shortcut key that sets focus on the widget. */\r\n    accessKey: string;\r\n    /** Specifies whether or not the widget changes its state when interacting with a user. */\r\n    activeStateEnabled: boolean;\r\n    /** Specifies the allowed upload file extensions. */\r\n    allowedFileExtensions: Array<string>;\r\n    /** Configures the context menu settings. */\r\n    contextMenu: dxFileManagerContextMenu;\r\n    /** Specifies the path that is used when the FileManager is initialized. */\r\n    currentPath: string;\r\n    /** Specifies an array of path keys to the current location. */\r\n    currentPathKeys: Array<string>;\r\n    /** Customizes columns in details view. Applies only if itemView.mode is \"details\". */\r\n    customizeDetailColumns: Function;\r\n    /** Allows you to provide custom icons to be used as thumbnails. */\r\n    customizeThumbnail: Function;\r\n    /** Specifies whether the widget responds to user interaction. */\r\n    disabled: boolean;\r\n    /** Specifies the attributes to be attached to the widget's root element. */\r\n    elementAttr: any;\r\n    /** Specifies the file system provider. */\r\n    fileSystemProvider: any;\r\n    /** Specifies a key of the initially or currently focused item. */\r\n    focusedItemKey: string;\r\n    /** Specifies whether the widget can be focused using keyboard navigation. */\r\n    focusStateEnabled: boolean;\r\n    /** Specifies the widget's height. */\r\n    height: number | Function | string;\r\n    /** Specifies text for a hint that appears when a user pauses on the widget. */\r\n    hint: string;\r\n    /** Specifies whether the widget changes its state when a user pauses on it. */\r\n    hoverStateEnabled: boolean;\r\n    /** Configures the file and folder view. */\r\n    itemView: {\r\n        details?: {\r\n            columns?: Array<DevExpress.ui.dxFileManagerDetailsColumn | string>;\r\n        };\r\n        mode?: string;\r\n        showFolders?: boolean;\r\n        showParentFolder?: boolean;\r\n    };\r\n    /** Specifies actions that a user is allowed to perform on files and folders. */\r\n    permissions: {\r\n        copy?: boolean;\r\n        create?: boolean;\r\n        delete?: boolean;\r\n        download?: boolean;\r\n        move?: boolean;\r\n        rename?: boolean;\r\n        upload?: boolean;\r\n    };\r\n    /** Specifies the root folder name. */\r\n    rootFolderName: string;\r\n    /** Switches the widget to a right-to-left representation. */\r\n    rtlEnabled: boolean;\r\n    /** Contains an array of initially or currently selected files and directories' keys. */\r\n    selectedItemKeys: Array<string>;\r\n    /** Specifies whether a user can select a single or multiple files and folders in the item view simultaneously. */\r\n    selectionMode: string;\r\n    /** Specifies the number of the element when the Tab key is used for navigating. */\r\n    tabIndex: number;\r\n    /** Configures toolbar settings. */\r\n    toolbar: dxFileManagerToolbar;\r\n    /** Configures upload settings. */\r\n    upload: {\r\n        chunkSize?: number;\r\n        maxFileSize?: number;\r\n    };\r\n    /** Specifies whether the widget is visible. */\r\n    visible: boolean;\r\n    /** Specifies the widget's width. */\r\n    width: number | Function | string;\r\n    /** A function that is executed when the widget's content is ready and each time the content is changed. */\r\n    onContentReady: EventEmitter<any>;\r\n    /** A function that is executed when a context menu item is clicked. */\r\n    onContextMenuItemClick: EventEmitter<any>;\r\n    /** A function that is executed when the current directory is changed. */\r\n    onCurrentDirectoryChanged: EventEmitter<any>;\r\n    /** A function that is executed before the widget is disposed of. */\r\n    onDisposing: EventEmitter<any>;\r\n    /** A function that is executed when an error occurs. */\r\n    onErrorOccurred: EventEmitter<any>;\r\n    /** A function that is executed when the focused item is changed. */\r\n    onFocusedItemChanged: EventEmitter<any>;\r\n    /** A function used in JavaScript frameworks to save the widget instance. */\r\n    onInitialized: EventEmitter<any>;\r\n    /** A function that is executed after a widget option is changed. */\r\n    onOptionChanged: EventEmitter<any>;\r\n    /** A function that is executed when the selected file is opened. */\r\n    onSelectedFileOpened: EventEmitter<any>;\r\n    /** A function that is executed when a file system item is selected or selection is canceled. */\r\n    onSelectionChanged: EventEmitter<any>;\r\n    /** A function that is executed when a toolbar item is clicked. */\r\n    onToolbarItemClick: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    accessKeyChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    activeStateEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    allowedFileExtensionsChange: EventEmitter<Array<string>>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    contextMenuChange: EventEmitter<dxFileManagerContextMenu>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    currentPathChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    currentPathKeysChange: EventEmitter<Array<string>>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    customizeDetailColumnsChange: EventEmitter<Function>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    customizeThumbnailChange: EventEmitter<Function>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    disabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    elementAttrChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    fileSystemProviderChange: EventEmitter<any>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    focusedItemKeyChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    focusStateEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    heightChange: EventEmitter<number | Function | string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    hintChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    hoverStateEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    itemViewChange: EventEmitter<{\r\n        details?: {\r\n            columns?: Array<DevExpress.ui.dxFileManagerDetailsColumn | string>;\r\n        };\r\n        mode?: string;\r\n        showFolders?: boolean;\r\n        showParentFolder?: boolean;\r\n    }>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    permissionsChange: EventEmitter<{\r\n        copy?: boolean;\r\n        create?: boolean;\r\n        delete?: boolean;\r\n        download?: boolean;\r\n        move?: boolean;\r\n        rename?: boolean;\r\n        upload?: boolean;\r\n    }>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    rootFolderNameChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    rtlEnabledChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    selectedItemKeysChange: EventEmitter<Array<string>>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    selectionModeChange: EventEmitter<string>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    tabIndexChange: EventEmitter<number>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    toolbarChange: EventEmitter<dxFileManagerToolbar>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    uploadChange: EventEmitter<{\r\n        chunkSize?: number;\r\n        maxFileSize?: number;\r\n    }>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    visibleChange: EventEmitter<boolean>;\r\n    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */\r\n    widthChange: EventEmitter<number | Function | string>;\r\n    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);\r\n    protected _createInstance(element: any, options: any): DxFileManager;\r\n    ngOnDestroy(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    setupChanges(prop: string, changes: SimpleChanges): void;\r\n    ngDoCheck(): void;\r\n    _setOption(name: string, value: any): void;\r\n}\r\nexport declare class DxFileManagerModule {\r\n}\r\n"]}